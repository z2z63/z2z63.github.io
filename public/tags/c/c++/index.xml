<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C/C&#43;&#43; on z2z63/Virtualfuture&#39;s Blog</title>
    <link>http://blog.z2z63.dev/tags/c/c&#43;&#43;/</link>
    <description>Recent content in C/C&#43;&#43; on z2z63/Virtualfuture&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <managingEditor>virtualfuture@gmail.com (z2z63)</managingEditor>
    <webMaster>virtualfuture@gmail.com (z2z63)</webMaster>
    <lastBuildDate>Sat, 20 Jul 2024 20:58:06 +0800</lastBuildDate>
    <atom:link href="http://blog.z2z63.dev/tags/c/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PostgreSQL源码阅读报告</title>
      <link>http://blog.z2z63.dev/posts/postgresql_source/</link>
      <pubDate>Thu, 21 Dec 2023 18:27:09 +0800</pubDate><author>virtualfuture@gmail.com (z2z63)</author>
      <guid>http://blog.z2z63.dev/posts/postgresql_source/</guid>
      <description>&lt;p&gt;这篇文章是数据库系统原理课程的任务“阅读postgresql源码“的报告&lt;/p&gt;</description>
    </item>
    <item>
      <title>coreutils之hash table</title>
      <link>http://blog.z2z63.dev/posts/coreutils_hash/</link>
      <pubDate>Sat, 14 Oct 2023 16:08:58 +0800</pubDate><author>virtualfuture@gmail.com (z2z63)</author>
      <guid>http://blog.z2z63.dev/posts/coreutils_hash/</guid>
      <description>&lt;p&gt;最近在阅读coreutils，发现很多有意思的部分，比如哈希表的链表实现&lt;/p&gt;</description>
    </item>
    <item>
      <title>右值引用</title>
      <link>http://blog.z2z63.dev/posts/rvalue-reference/</link>
      <pubDate>Mon, 29 May 2023 22:20:02 +0000</pubDate><author>virtualfuture@gmail.com (z2z63)</author>
      <guid>http://blog.z2z63.dev/posts/rvalue-reference/</guid>
      <description>&lt;p&gt;C++11后引入了右值引用等特性，用来支持移动语义和完美转发，在了解右值引用前，需要了解一些前置的概念&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;左值(lvalue)&#xA;左值字面意义是在等号左边的值，左值是寻址的，具名的，有标识符的&lt;br&gt;&#xA;有一个特点是，所有声明的变量都是左值&lt;/li&gt;&#xA;&lt;li&gt;右值(rvalue)&#xA;右值字面意义是在等号右边的值，右值不可寻址，不具名&#xA;具体而言：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一个整数字面量是右值，因为它不对应一个内存存储位置，在汇编中，它存在于指令中的立即数字段&lt;/li&gt;&#xA;&lt;li&gt;一个临时对象是右值，临时对象是为了写连续的表达式而被编译器支持的，当有例如&lt;code&gt;func(obj())&lt;/code&gt;时，首先建立一个obj对象，这个对象没有名字，它实际上有一个对于的内存存储位置，但在这行代码执行完后就会被销毁，所以它叫做临时对象&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;cpp对临时对象有一个限制，因为临时对象是马上就会被销毁的，所以对临时对象的修会被抛弃&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
